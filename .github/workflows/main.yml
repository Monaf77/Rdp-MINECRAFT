name: RDP Web Interface

on:
  workflow_dispatch:
    inputs:
      runtime_minutes:
        description: 'مدة التشغيل (بالدقائق)'
        required: true
        default: '360'
      password:
        description: 'كلمة مرور RDP'
        required: true
        default: 'admin@123'

jobs:
  setup-rdp:
    runs-on: windows-latest
    # تعيين المهلة القصوى إلى 6 ساعات (360 دقيقة)
    timeout-minutes: 360
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
        cache: 'npm'

    - name: Create web interface
      shell: pwsh
      run: |
        # إنشاء مجلد التطبيق
        New-Item -ItemType Directory -Path "rdp-web" -Force | Out-Null
        Set-Location -Path "rdp-web"
        
        # إنشاء package.json
        @'
        {
          "name": "rdp-web-interface",
          "version": "1.0.0",
          "description": "واجهة ويب للتحكم في RDP",
          "main": "server.js",
          "scripts": {
            "start": "node server.js"
          },
          "dependencies": {
            "express": "^4.18.2",
            "body-parser": "^1.20.2"
          }
        }
        '@ | Out-File -FilePath "package.json" -Encoding utf8

        # إنشاء مجلد public
        New-Item -ItemType Directory -Path "public" -Force | Out-Null

        # إنشاء ملف server.js
        @'
        const express = require('express');
        const bodyParser = require('body-parser');
        const { exec } = require('child_process');
        const path = require('path');

        const app = express();
        const PORT = 3000;

        app.use(bodyParser.json());
        app.use(express.static('public'));

        const AUTH_TOKEN = process.env.AUTH_TOKEN || 'default-secure-token';

        const authenticate = (req, res, next) => {
            const token = req.headers.authorization;
            if (token !== `Bearer ${AUTH_TOKEN}`) {
                return res.status(401).json({ error: 'غير مصرح' });
            }
            next();
        };

        app.post('/api/rdp/connect', authenticate, (req, res) => {
            const { host, username, password } = req.body;
            
            if (!host || !username || !password) {
                return res.status(400).json({ error: 'جميع الحقول مطلوبة' });
            }

            const command = `cmdkey /generic:${host} /user:${username} /pass:${password} && start mstsc /v:${host}`;
            
            exec(command, (error) => {
                if (error) {
                    return res.status(500).json({ error: 'فشل الاتصال بـ RDP' });
                }
                res.json({ message: 'تم بدء اتصال RDP بنجاح' });
            });
        });

        app.post('/api/rdp/disconnect', authenticate, (req, res) => {
            exec('taskkill /F /IM mstsc.exe', (error) => {
                if (error) {
                    return res.status(500).json({ error: 'فشل إغلاق اتصال RDP' });
                }
                res.json({ message: 'تم قطع اتصال RDP بنجاح' });
            });
        });

        app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'public', 'index.html'));
        });

        app.listen(PORT, '0.0.0.0', () => {
            console.log(`الخادم يعمل على المنفذ ${PORT}`);
        });
        '@ | Out-File -FilePath "server.js" -Encoding utf8

        # إنشاء ملف index.html
        @'
        <!DOCTYPE html>
        <html lang="ar" dir="rtl">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>لوحة تحكم RDP</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">
            <style>
                body { background-color: #f8f9fa; font-family: 'Segoe UI', Tahoma, sans-serif; }
                .card { border-radius: 15px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
                .card-header { background-color: #0d6efd; color: white; border-radius: 15px 15px 0 0 !important; }
                .btn-primary { background-color: #0d6efd; border: none; padding: 10px 25px; }
                .btn-danger { padding: 10px 25px; }
                .status { transition: all 0.3s ease; }
            </style>
        </head>
        <body>
            <div class="container mt-5">
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header text-center">
                                <h3>لوحة تحكم اتصال RDP</h3>
                            </div>
                            <div class="card-body">
                                <form id="rdpForm">
                                    <div class="mb-3">
                                        <label class="form-label">عنوان الخادم (IP)</label>
                                        <input type="text" class="form-control" id="host" required 
                                               placeholder="مثال: 192.168.1.100">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">اسم المستخدم</label>
                                        <input type="text" class="form-control" id="username" required
                                               placeholder="أدخل اسم المستخدم">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">كلمة المرور</label>
                                        <input type="password" class="form-control" id="password" required
                                               placeholder="أدخل كلمة المرور">
                                    </div>
                                    
                                    <div class="d-grid gap-2">
                                        <button type="button" id="connectBtn" class="btn btn-primary">
                                            اتصل
                                        </button>
                                        <button type="button" id="disconnectBtn" class="btn btn-danger" disabled>
                                            قطع الاتصال
                                        </button>
                                    </div>
                                    
                                    <div id="status" class="mt-3 alert" style="display: none;"></div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                const AUTH_TOKEN = 'default-secure-token';
                
                document.getElementById('connectBtn').addEventListener('click', async () => {
                    const host = document.getElementById('host').value.trim();
                    const username = document.getElementById('username').value.trim();
                    const password = document.getElementById('password').value;
                    const status = document.getElementById('status');
                    
                    if (!host || !username || !password) {
                        showStatus('الرجاء ملء جميع الحقول', 'danger');
                        return;
                    }
                    
                    toggleButtons(false);
                    showStatus('جاري الاتصال...', 'info');
                    
                    try {
                        const response = await fetch('/api/rdp/connect', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${AUTH_TOKEN}`
                            },
                            body: JSON.stringify({ host, username, password })
                        });
                        
                        const data = await response.json();
                        
                        if (response.ok) {
                            showStatus('تم الاتصال بنجاح!', 'success');
                            document.getElementById('connectBtn').disabled = true;
                            document.getElementById('disconnectBtn').disabled = false;
                        } else {
                            throw new Error(data.error || 'فشل الاتصال');
                        }
                    } catch (error) {
                        showStatus(`خطأ: ${error.message}`, 'danger');
                        toggleButtons(true);
                    }
                });
                
                document.getElementById('disconnectBtn').addEventListener('click', async () => {
                    const status = document.getElementById('status');
                    toggleButtons(false);
                    showStatus('جاري قطع الاتصال...', 'info');
                    
                    try {
                        const response = await fetch('/api/rdp/disconnect', {
                            method: 'POST',
                            headers: {
                                'Authorization': `Bearer ${AUTH_TOKEN}`
                            }
                        });
                        
                        const data = await response.json();
                        
                        if (response.ok) {
                            showStatus('تم قطع الاتصال بنجاح', 'success');
                            document.getElementById('connectBtn').disabled = false;
                            document.getElementById('disconnectBtn').disabled = true;
                        } else {
                            throw new Error(data.error || 'فشل قطع الاتصال');
                        }
                    } catch (error) {
                        showStatus(`خطأ: ${error.message}`, 'danger');
                    } finally {
                        toggleButtons(true);
                    }
                });
                
                function showStatus(message, type) {
                    const status = document.getElementById('status');
                    status.textContent = message;
                    status.className = `mt-3 alert alert-${type}`;
                    status.style.display = 'block';
                }
                
                function toggleButtons(enable) {
                    document.getElementById('connectBtn').disabled = !enable;
                    if (enable) {
                        document.getElementById('disconnectBtn').disabled = !document.getElementById('connectBtn').disabled;
                    }
                }
                
                document.getElementById('rdpForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                });
            </script>
        </body>
        </html>
        '@ | Out-File -FilePath "public\index.html" -Encoding utf8

        # تثبيت الحزم
        npm install

    - name: تكوين RDP
      shell: pwsh
      run: |
        # تفعيل RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
        
        # تكوين جدار الحماية
        netsh advfirewall firewall delete rule name="RDP" | Out-Null
        netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389 | Out-Null
        Set-NetFirewallRule -DisplayGroup "Remote Desktop" -Enabled True -Profile Any
        Restart-Service TermService -Force

    - name: إنشاء مستخدم RDP
      shell: pwsh
      run: |
        $password = "${{ github.event.inputs.password || 'admin@123' }"
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force

        if (Get-LocalUser -Name "RDPUser" -ErrorAction SilentlyContinue) {
            Remove-LocalUser -Name "RDPUser" -Confirm:$false
        }

        New-LocalUser -Name "RDPUser" -Password $securePass -AccountNeverExpires
        Add-LocalGroupMember -Group "Administrators" -Member "RDPUser"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDPUser"
        Enable-LocalUser -Name "RDPUser"

        Write-Host "تم إنشاء المستخدم RDPUser بنجاح"
        Write-Host "كلمة المرور: $password"

    - name: تشغيل خادم الويب
      shell: pwsh
      run: |
        Set-Location rdp-web
        $env:AUTH_TOKEN = "default-secure-token"
        Start-Process "node" -ArgumentList "server.js" -NoNewWindow
        Start-Sleep -Seconds 2

    - name: عرض معلومات الاتصال
      shell: pwsh
      run: |
        $ip = (Get-NetIPAddress | Where-Object { $_.AddressFamily -eq 'IPv4' -and $_.PrefixOrigin -eq 'Dhcp' }).IPAddress
        Write-Host "=============================================="
        Write-Host "واجهة الويب متاحة على: http://$($ip):3000"
        Write-Host "معلومات تسجيل الدخول:"
        Write-Host "اسم المستخدم: RDPUser"
        Write-Host "كلمة المرور: $($env:RDP_PASSWORD)"
        Write-Host "=============================================="
        
        # انتظار حتى انتهاء المدة
        $minutes = [int]${{ github.event.inputs.runtime_minutes || 360 }}
        $seconds = $minutes * 60
        Start-Sleep -Seconds $seconds
