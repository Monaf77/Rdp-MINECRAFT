name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: تكوين إعدادات RDP
        run: |
          # تفعيل RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          
          # تكوين إعدادات الأمان
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          
          # تمكين الاتصالات
          New-Item -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Force | Out-Null
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fAllowUnsolicited" -Value 1 -Type DWord -Force
          
          # تكوين جدار الحماية
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null
          
          # تمكين RDP في جدار الحماية
          Set-NetFirewallRule -DisplayGroup "Remote Desktop" -Enabled True -Profile Any
          
          # إعادة تشغيل خدمة RDP
          Restart-Service TermService -Force
          Write-Host "✅ تم تكوين إعدادات RDP بنجاح"

      - name: إنشاء مستخدم RDP
        run: |
          $password = "admin@123"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # حذف المستخدم إذا كان موجوداً
          $userExists = Get-LocalUser -Name "TOOLBOXLAP" -ErrorAction SilentlyContinue
          if ($userExists) {
              Remove-LocalUser -Name "TOOLBOXLAP" -Confirm:$false
          }

          # إنشاء مستخدم جديد
          New-LocalUser -Name "TOOLBOXLAP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "TOOLBOXLAP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "TOOLBOXLAP"
          
          # تمكين المستخدم
          Enable-LocalUser -Name "TOOLBOXLAP"
          
          Write-Host "✅ تم إنشاء المستخدم TOOLBOXLAP بنجاح"
          echo "RDP_CREDS=User: TOOLBOXLAP | Password: $password" >> $env:GITHUB_ENV

      - name: تثبيت Tailscale
        shell: pwsh
        run: |
          # تنزيل Tailscale
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Write-Host "جاري تحميل Tailscale..."
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          
          # تثبيت Tailscale
          Write-Host "جاري التثبيت..."
          $process = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait -PassThru -NoNewWindow
          
          if ($process.ExitCode -eq 0) {
              Write-Host "✅ تم تثبيت Tailscale بنجاح"
          } else {
              Write-Error "❌ فشل التثبيت. كود الخروج: $($process.ExitCode)"
              exit 1
          }
          
          # تنظيف
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue

      - name: تكوين Tailscale
        run: |
          # إضافة المسار إلى متغيرات النظام
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
          
          # تشغيل Tailscale
          Write-Host "جاري تشغيل Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID --reset
          
          # الحصول على عنوان IP
          $tsIP = $null
          $retries = 0
          $maxRetries = 10
          
          while (-not $tsIP -and $retries -lt $maxRetries) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              if (-not $tsIP) { $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -6 }
              
              if (-not $tsIP) {
                  $retries++
                  Write-Host "⏳ انتظار عنوان IP... ($retries/$maxRetries)"
                  Start-Sleep -Seconds 5
              }
          }
          
          if (-not $tsIP) {
              Write-Error "❌ فشل الحصول على عنوان IP"
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "✅ عنوان Tailscale: $tsIP"

      - name: التحقق من الاتصال
        run: |
          $tsIP = $env:TAILSCALE_IP
          Write-Host "`n=== فحص الاتصال ==="
          
          # فحص Ping
          Write-Host "`nجاري فحص اتصال Ping..."
          ping -n 3 $tsIP
          
          # فحص منفذ RDP
          Write-Host "`nجاري فحص منفذ RDP..."
          $tcpClient = New-Object System.Net.Sockets.TCPClient
          try {
              $connect = $tcpClient.BeginConnect($tsIP, 3389, $null, $null)
              $success = $connect.AsyncWaitHandle.WaitOne(5000, $false)
              if ($success) {
                  Write-Host "✅ منفذ RDP مفتوح" -ForegroundColor Green
                  $tcpClient.EndConnect($connect)
              } else {
                  Write-Host "❌ فشل الاتصال" -ForegroundColor Red
              }
          } catch {
              Write-Host "❌ خطأ: $_" -ForegroundColor Red
          } finally {
              $tcpClient.Dispose()
          }

      - name: تشغيل الخادم
        run: |
          $tsIP = $env:TAILSCALE_IP
          $retryCount = 0
          $maxRetries = 5
          
          Write-Host "`n=== معلومات الاتصال ==="
          Write-Host "العنوان: $tsIP"
          Write-Host "المستخدم: TOOLBOXLAP"
          Write-Host "كلمة المرور: admin@123"
          Write-Host "====================="
          
          while ($true) {
              $connectionTest = Test-NetConnection -ComputerName $tsIP -Port 3389 -WarningAction SilentlyContinue
              
              if ($connectionTest.TcpTestSucceeded) {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ✅ RDP جاهز على: $tsIP" -ForegroundColor Green
              } else {
                  $retryCount++
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] ⚠️  محاولة $retryCount/$maxRetries..." -ForegroundColor Yellow
                  
                  if ($retryCount -ge $maxRetries) {
                      Write-Host "إعادة تشغيل Tailscale..." -ForegroundColor Cyan
                      & "$env:ProgramFiles\Tailscale\tailscale.exe" down
                      Start-Sleep -Seconds 2
                      & "$env:ProgramFiles\Tailscale\tailscale.exe" up --reset
                      $retryCount = 0
                  }
              }
              
              Start-Sleep -Seconds 30
          }
